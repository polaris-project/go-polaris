// Package crypto defines a set of helper methods for repetitive cryptographic operations used by the Polaris protocol.
package crypto

import (
	"encoding/hex"

	"lukechampine.com/blake3"
)

// Address represents a 32-byte-long hashed used to encode a particular user's public key in hash format.
type Address Hash

// Hash represents a 32-byte-long array generated by the blake3 hashing function.
type Hash [32]byte

// HashBlake3 hashes the given slice of data via the blake3 hashing algorithm.
func HashBlake3(b []byte) Hash {
	// Generate a hash of the given data via blake3, and coerce the resulting slice into a hash primitive
	return Hash(blake3.Sum256(b))
}

// HashFromString converts the given hex-encoded string into a hash.
func HashFromString(s string) (h Hash, e error) {
	// Decode the provided string
	decoded, err := hex.DecodeString(s)

	// Check for any possible errors
	if err != nil {
		// Return a zero-value array + the error
		return [32]byte{}, err
	}

	// Copy the contents of the variable-length provided data into the destination hash buffer
	copy(decoded, h[:])

	return // We're done!
}

// String derives a string representation of the hash using base 16.
func (h *Hash) String() string {
	// Convert the slice of bytes into a string
	return hex.EncodeToString(h[:])
}
